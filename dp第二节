回文串问题
比如aba就是一个回文串，a也算一个回文串，像这种的都叫回文串
那么
给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。
有这么一道题，那么我们怎么思考
我们可以设dp[i][j]为范围i到j，结果为i,j是不是回文串，i取自于是s的索引
我们可以找一些特解，a一定是回文串，也就是当i==j，选到了同一个索引，那么对应的字符一定相同
于是我们开始找怎样才能是一个回文串，aa一定是个，aaa也一定是，他们都有一个提点就是，第一项等于最后一项
但是第一项等于最后一项的并不一定是回文串
比如abca，那么我们可以假设如果第一项等于最后一项。我们可以让指针前进和后退，也就是i+1 j-1,这样我们就来到了bc,显然他们不相等，于是我们就返回false
显然我们找到了一个状态转移方程
那么dp[i+1][j-1]就是变化的状态，注意我们设的什么，我们设的是i,j的状态是不是回文串，所以我们的i+1，j-1其实就是带入进入的参变量而已
所以就变成了dp[i][j]=dp[i+1][j-1]
于是我们就分析完了状态了
但是我们的遍历怎么解决呢，我们是不是得还得有个判断，不然我们没法进入状态转意方程
根据我们得分析，j得大于i，所以我们设j从1开始，i要从0开始，限制是字符串的长度          （如果这儿看不懂的话，我提示一下， abxcsdc substring(0,1)得到的是a,这样应该懂了）
好剩下就是怎么进入状态转移方程了
也就是判断如果s.charAt(i)==s.charAt(j)
我们就进入状态转意方程
但是我们漏掉了一件事情就是状态转移只有开始没有结尾
也就是我们没告诉它什么时候结束
我们再来看aba这种情况时回文串吧，第一项是等于最后一项，但是这是一个稳妥的回文串，我们没必要进行-1，+1，他中间只有一个字母，掀不起风浪，所以这种情况铁定字符串
如果我们加入了这个判断，就会省了很多时间，而且我们aba索引012 0+1 2-1 这样最有判断一个自己等于自己，很没意思。浪费时间，所以我们设置
j-i>=3我们进了dp[i][j]=dp[i+1][j-1]，j-i<3的话我们就没必要进入判断，它一定是true
 for (int j = 1; j < len; j++) {  //j=1是为了找第一位，最左端和最右端要差个1
            for (int i = 0; i <j ; i++) {
                if (s.charAt(i)==s.charAt(j))
                {
                    dp[i][j]=j-i<3?true:dp[i+1][j-1];
                    //假如相等，如果abca这种就算不是j-i<3，j-i<3为了找aba这种，相同就会ture
                    //否则要继续进位比较
                }else{
                    dp[i][j]=false;
                }
            }
        }
        于是就变成了这样
        
        
      
